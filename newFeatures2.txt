# AgentPlaces Deployment Strategy for GitHub Pages and Render

After examining your repository structure and tech stack, I can see you're building an AgentPlaces platform with a React/TypeScript frontend and NestJS backend. Here's a comprehensive deployment strategy using GitHub Pages for the frontend and Render for backend services.

## Repository Analysis

Your codebase is primarily TypeScript (83.2%) with HTML (9%) and CSS (5.4%), organized in a modular architecture:
- **Frontend**: React + TypeScript components
- **Backend**: NestJS with modular services
- **Database**: MongoDB for data persistence
- **Cache**: Redis for performance optimization
- **Queue**: BullMQ for task management

## Deployment Strategy

### Frontend Deployment with GitHub Pages

GitHub Pages is perfect for hosting your static frontend assets. Here's how to set it up:

```javascript
// Add this to your package.json in the frontend directory
{
  "name": "agentplaces-frontend",
  "homepage": "https://kaplayan-atakan.github.io/agentPlaces",
  "scripts": {
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build"
  },
  "dependencies": {
    // existing dependencies
  },
  "devDependencies": {
    "gh-pages": "^5.0.0"
    // existing dev dependencies
  }
}
```

Then create a GitHub Actions workflow to automate deployment:

```yaml name=.github/workflows/deploy-frontend.yml
name: Deploy Frontend to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Build
        run: |
          cd frontend
          npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.RENDER_API_URL }}

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: gh-pages
          folder: frontend/build
```

### Backend Deployment with Render

Render can host your NestJS backend, MongoDB, and Redis services:

1. **Create a render.yaml file** for Blueprint deployment:

```yaml name=render.yaml
services:
  # NestJS API Service
  - type: web
    name: agentplaces-api
    env: node
    buildCommand: cd backend && npm ci && npm run build
    startCommand: cd backend && npm run start:prod
    envVars:
      - key: NODE_ENV
        value: production
      - key: MONGODB_URI
        fromDatabase:
          name: agentplaces-mongodb
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: agentplaces-redis
          type: redis
          property: connectionString

  # Worker Service for Background Jobs
  - type: worker
    name: agentplaces-worker
    env: node
    buildCommand: cd backend && npm ci && npm run build
    startCommand: cd backend && npm run start:worker
    envVars:
      - key: NODE_ENV
        value: production
      - key: MONGODB_URI
        fromDatabase:
          name: agentplaces-mongodb
          property: connectionString
      - key: REDIS_URL
        fromService:
          name: agentplaces-redis
          type: redis
          property: connectionString

databases:
  - name: agentplaces-mongodb
    type: mongodb
    ipAllowList: []

services:
  - type: redis
    name: agentplaces-redis
    ipAllowList: []
    plan: free
```

2. **Configure NestJS for Production** in the backend:

```typescript name=backend/src/config/configuration.ts
export default () => ({
  port: parseInt(process.env.PORT, 10) || 3000,
  database: {
    uri: process.env.MONGODB_URI || 'mongodb://localhost/agentplaces',
  },
  redis: {
    url: process.env.REDIS_URL || 'redis://localhost:6379',
  },
  cors: {
    origin: process.env.NODE_ENV === 'production' 
      ? 'https://kaplayan-atakan.github.io' 
      : 'http://localhost:3000',
    credentials: true,
  }
});
```

3. **Update your main.ts file** to enable CORS:

```typescript name=backend/src/main.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ConfigService } from '@nestjs/config';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  const configService = app.get(ConfigService);
  
  // Enable CORS for GitHub Pages frontend
  app.enableCors(configService.get('cors'));
  
  // Ensure Render can assign port dynamically
  const port = configService.get('port');
  await app.listen(port);
  console.log(`Application is running on: ${await app.getUrl()}`);
}
bootstrap();
```

## Implementation Steps

1. **Configure API URL in Frontend**

Create an environment file to handle different API endpoints:

```javascript name=frontend/src/config/api.js
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';

export const getApiUrl = (endpoint) => `${API_URL}${endpoint}`;

export const API = {
  agents: getApiUrl('/agents'),
  files: getApiUrl('/file-processing'),
  mail: getApiUrl('/mail-analysis'),
  // Add other endpoints as needed
};
```

2. **Set up API Service in Frontend**

```typescript name=frontend/src/services/apiService.ts
import axios from 'axios';
import { API } from '../config/api';

// Create axios instance for easy config management
const apiClient = axios.create({
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add auth interceptor
apiClient.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Export service methods
export const agentService = {
  getAll: () => apiClient.get(API.agents),
  getById: (id) => apiClient.get(`${API.agents}/${id}`),
  create: (data) => apiClient.post(API.agents, data),
  update: (id, data) => apiClient.put(`${API.agents}/${id}`, data),
  delete: (id) => apiClient.delete(`${API.agents}/${id}`),
};

export const fileService = {
  upload: (file, options) => {
    const formData = new FormData();
    formData.append('file', file);
    if (options) {
      formData.append('options', JSON.stringify(options));
    }
    return apiClient.post(API.files, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
  },
  getProcessingStatus: (id) => apiClient.get(`${API.files}/status/${id}`),
};

// Add more service methods as needed
```

3. **Update Backend for Production Deployment**

Ensure the NestJS app properly handles production environment:

```typescript name=backend/src/app.module.ts
import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { MongooseModule } from '@nestjs/mongoose';
import { BullModule } from '@nestjs/bull';
import configuration from './config/configuration';

// Import your modules
import { AgentsModule } from './modules/agents/agents.module';
import { FileProcessingModule } from './modules/file-processing/file-processing.module';
import { MailAnalysisModule } from './modules/mail-analysis/mail-analysis.module';
import { LlmIntegrationModule } from './modules/llm-integration/llm-integration.module';
import { AuthModule } from './modules/auth/auth.module';

@Module({
  imports: [
    // Load configuration based on environment
    ConfigModule.forRoot({
      isGlobal: true,
      load: [configuration],
    }),
    
    // Database connection with MongoDB
    MongooseModule.forRootAsync({
      inject: [ConfigService],
      useFactory: async (configService: ConfigService) => ({
        uri: configService.get<string>('database.uri'),
      }),
    }),
    
    // Redis queue setup
    BullModule.forRootAsync({
      inject: [ConfigService],
      useFactory: async (configService: ConfigService) => ({
        redis: {
          url: configService.get<string>('redis.url'),
        },
      }),
    }),
    
    // Application modules
    AgentsModule,
    FileProcessingModule,
    MailAnalysisModule,
    LlmIntegrationModule,
    AuthModule,
  ],
})
export class AppModule {}
```

## Deployment Instructions

1. **Set up GitHub Pages Deployment**
   - Install `gh-pages`: `npm install --save-dev gh-pages`
   - Add the scripts to package.json as shown above
   - Deploy manually first: `npm run deploy`
   - Set up the GitHub Action workflow

2. **Set up Render Deployment**
   - Create a Render account if you don't have one
   - Connect your GitHub repository
   - Set up Blueprint deployment with the render.yaml file
   - Configure environment variables for secrets
   - Deploy the services

3. **Connect Frontend to Backend**
   - Set the `REACT_APP_API_URL` environment variable to your Render API URL
   - Update CORS settings in the backend to allow requests from your GitHub Pages domain

4. **Testing the Deployment**
   - Test API endpoints with Postman or similar tool
   - Verify frontend connectivity to backend services
   - Check environment-specific configurations

This implementation ensures your frontend is hosted on GitHub Pages while your backend services run on Render, providing a cost-effective and scalable deployment solution for your AgentPlaces application.